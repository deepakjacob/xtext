/*
 * Reads the Manifest.mf of a project and translates the required bundles to maven-style dependencies.
 * The versions are taken from the org.eclipse.xtext.parent pom.xml
 */

import org.apache.ivy.osgi.core.ManifestParser

buildscript {
	repositories.jcenter()
	dependencies {
		classpath (group: 'org.apache.ivy', name: 'ivy', version: '2.4.0')
	}
}

def toDependency = {requirement ->
	if (requirement.resolution == 'optional') {
		return null
	}
	if (requirement.name.contains('.ui') || requirement.name.contains('.editor')) {
		return null
	}
	def projectDependency = rootProject.allprojects.find{it.name == requirement.name}
	if (projectDependency) {
		return projectDependency
	}
	if (requirement.name == 'com.google.inject') {
		return [group:'com.google.inject', name:'guice', version:versions.'google-inject.version']
	}
	if (requirement.name == 'org.antlr.runtime') {
		return [group:'org.antlr', name:'antlr-runtime', version:versions.'antlr.version']
	}
	if (requirement.name == 'org.eclipse.equinox.common') {
		return [group:'org.eclipse.equinox', name:'org.eclipse.equinox.common', version:versions.'equinox-common-version']
	}
	if (requirement.name.startsWith('org.eclipse.emf.mwe2')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:versions.'mwe2-version']
	}
	if (requirement.name.startsWith('org.eclipse.emf.mwe')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:versions.'mwe-version']
	}
	if (requirement.name.startsWith('org.eclipse.emf')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:versions.'emf.version']
	}
	if (requirement.name == 'org.eclipse.jdt.core') {
		return [group:'org.eclipse.jdt', name: 'org.eclipse.jdt.core', version:versions.'jdt-core-version']
	}
	if (requirement.name == 'org.apache.log4j') {
		return [group:'log4j', name: 'log4j', version:versions.'log4j.version']
	}
	if (requirement.name == 'com.google.guava') {
		return [group:'com.google.guava', name: 'guava', version:versions.'guava.version']
	}
	if (requirement.name == 'org.objectweb.asm') {
		return [group:'org.ow2.asm', name: 'asm', version:versions.'asm.version']
	}
	if (requirement.name.startsWith('org.eclipse.xtend') || requirement.name == 'org.eclipse.xpand') {
		return [group:'org.eclipse.xpand', name: requirement.name, version:versions.'xpand-version']
	}
	if (requirement.name == 'de.itemis.xtext.antlr') {
		return [group:'org.eclipse.xtext', name: 'xtext-antlr-generator', version:versions.'antlr-generator-version']
	}
	if (requirement.name == 'org.junit') {
		return [group:'junit', name: 'junit', version:versions.'junit-version']
	}
	if (requirement.name == 'org.apache.commons.logging') {
		return [group:'commons-logging', name: 'commons-logging', version:versions.'commons-logging.version']
	}
	if (requirement.name == 'javax.inject') {
		return [group:'javax.inject', name: 'javax.inject', version:versions.'javax-inject.version']
	}
	logger.debug("Requirement '${requirement}' of ${project} is not mapped to a Maven dependency")
}

dependencies {
	def manifestFile = file('META-INF/MANIFEST.MF')
	def manifest = ManifestParser.parseManifest(manifestFile)
	manifest.requires
		.collect{toDependency(it)}
		.findAll {it != null}
		.each {
			add('compile', it)
		}
}
