/*
 * generated by Xtext
 */
parser grammar InternalBacktrackingLexerTestLanguageParser;

options {
	tokenVocab=InternalBacktrackingLexerTestLanguageLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	memoize=true;
}

@header {
package org.eclipse.xtext.lexer.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess;

}
@members {
	private BacktrackingLexerTestLanguageGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Abc", "'Abc'");
		tokenNameToValue.put("Efg", "'Efg'");
	}

	public void setGrammarAccess(BacktrackingLexerTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAb
entryRuleAb
:
{ before(grammarAccess.getAbRule()); }
	 ruleAb
{ after(grammarAccess.getAbRule()); } 
	 EOF 
;

// Rule Ab
ruleAb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbAccess().getGroup()); }
		(rule__Ab__Group__0)
		{ after(grammarAccess.getAbAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXb
entryRuleXb
:
{ before(grammarAccess.getXbRule()); }
	 ruleXb
{ after(grammarAccess.getXbRule()); } 
	 EOF 
;

// Rule Xb
ruleXb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXbAccess().getGroup()); }
		(rule__Xb__Group__0)
		{ after(grammarAccess.getXbAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EnumName
ruleEnumName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumNameAccess().getAlternatives()); }
		(rule__EnumName__Alternatives)
		{ after(grammarAccess.getEnumNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumNameAccess().getAbcEnumLiteralDeclaration_0()); }
		(Abc)
		{ after(grammarAccess.getEnumNameAccess().getAbcEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumNameAccess().getEfgEnumLiteralDeclaration_1()); }
		(Efg)
		{ after(grammarAccess.getEnumNameAccess().getEfgEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getEnumsAssignment_0()); }
	(rule__Model__EnumsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getEnumsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getYcsAssignment_1()); }
	(rule__Model__YcsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getYcsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAbsAssignment_2()); }
	(rule__Model__AbsAssignment_2)*
	{ after(grammarAccess.getModelAccess().getAbsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getXbsAssignment_3()); }
	(rule__Model__XbsAssignment_3)*
	{ after(grammarAccess.getModelAccess().getXbsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getYsAssignment_4()); }
	(rule__Model__YsAssignment_4)*
	{ after(grammarAccess.getModelAccess().getYsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAsAssignment_5()); }
	(rule__Model__AsAssignment_5)*
	{ after(grammarAccess.getModelAccess().getAsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ab__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ab__Group__0__Impl
	rule__Ab__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ab__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbAccess().getXAssignment_0()); }
	(rule__Ab__XAssignment_0)
	{ after(grammarAccess.getAbAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ab__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ab__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ab__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbAccess().getYAssignment_1()); }
	(rule__Ab__YAssignment_1)
	{ after(grammarAccess.getAbAccess().getYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xb__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xb__Group__0__Impl
	rule__Xb__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xb__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXbAccess().getXAssignment_0()); }
	(rule__Xb__XAssignment_0)
	{ after(grammarAccess.getXbAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xb__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xb__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xb__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXbAccess().getYAssignment_1()); }
	(rule__Xb__YAssignment_1)
	{ after(grammarAccess.getXbAccess().getYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__EnumsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEnumsEnumNameEnumRuleCall_0_0()); }
		ruleEnumName
		{ after(grammarAccess.getModelAccess().getEnumsEnumNameEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__YcsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getYcsYcTerminalRuleCall_1_0()); }
		RULE_YC
		{ after(grammarAccess.getModelAccess().getYcsYcTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AbsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getAbsAbParserRuleCall_2_0()); }
		ruleAb
		{ after(grammarAccess.getModelAccess().getAbsAbParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__XbsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getXbsXbParserRuleCall_3_0()); }
		ruleXb
		{ after(grammarAccess.getModelAccess().getXbsXbParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__YsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getYsCharYTerminalRuleCall_4_0()); }
		RULE_CHARY
		{ after(grammarAccess.getModelAccess().getYsCharYTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getAsCharATerminalRuleCall_5_0()); }
		RULE_CHARA
		{ after(grammarAccess.getModelAccess().getAsCharATerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ab__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbAccess().getXCharATerminalRuleCall_0_0()); }
		RULE_CHARA
		{ after(grammarAccess.getAbAccess().getXCharATerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ab__YAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbAccess().getYCharbTerminalRuleCall_1_0()); }
		RULE_CHARB
		{ after(grammarAccess.getAbAccess().getYCharbTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xb__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXbAccess().getXCharXTerminalRuleCall_0_0()); }
		RULE_CHARX
		{ after(grammarAccess.getXbAccess().getXCharXTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xb__YAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXbAccess().getYCharbTerminalRuleCall_1_0()); }
		RULE_CHARB
		{ after(grammarAccess.getXbAccess().getYCharbTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
